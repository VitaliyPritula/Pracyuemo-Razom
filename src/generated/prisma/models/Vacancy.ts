
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Vacancy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Vacancy
 * 
 */
export type VacancyModel = runtime.Types.Result.DefaultSelection<Prisma.$VacancyPayload>

export type AggregateVacancy = {
  _count: VacancyCountAggregateOutputType | null
  _min: VacancyMinAggregateOutputType | null
  _max: VacancyMaxAggregateOutputType | null
}

export type VacancyMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  location: string | null
  company: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VacancyMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  location: string | null
  company: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VacancyCountAggregateOutputType = {
  id: number
  title: number
  description: number
  location: number
  company: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type VacancyMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  location?: true
  company?: true
  createdAt?: true
  updatedAt?: true
}

export type VacancyMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  location?: true
  company?: true
  createdAt?: true
  updatedAt?: true
}

export type VacancyCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  location?: true
  company?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type VacancyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vacancy to aggregate.
   */
  where?: Prisma.VacancyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vacancies to fetch.
   */
  orderBy?: Prisma.VacancyOrderByWithRelationInput | Prisma.VacancyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VacancyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vacancies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vacancies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Vacancies
  **/
  _count?: true | VacancyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VacancyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VacancyMaxAggregateInputType
}

export type GetVacancyAggregateType<T extends VacancyAggregateArgs> = {
      [P in keyof T & keyof AggregateVacancy]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVacancy[P]>
    : Prisma.GetScalarType<T[P], AggregateVacancy[P]>
}




export type VacancyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VacancyWhereInput
  orderBy?: Prisma.VacancyOrderByWithAggregationInput | Prisma.VacancyOrderByWithAggregationInput[]
  by: Prisma.VacancyScalarFieldEnum[] | Prisma.VacancyScalarFieldEnum
  having?: Prisma.VacancyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VacancyCountAggregateInputType | true
  _min?: VacancyMinAggregateInputType
  _max?: VacancyMaxAggregateInputType
}

export type VacancyGroupByOutputType = {
  id: string
  title: string
  description: string
  location: string
  company: string
  createdAt: Date
  updatedAt: Date
  _count: VacancyCountAggregateOutputType | null
  _min: VacancyMinAggregateOutputType | null
  _max: VacancyMaxAggregateOutputType | null
}

type GetVacancyGroupByPayload<T extends VacancyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VacancyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VacancyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VacancyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VacancyGroupByOutputType[P]>
      }
    >
  >



export type VacancyWhereInput = {
  AND?: Prisma.VacancyWhereInput | Prisma.VacancyWhereInput[]
  OR?: Prisma.VacancyWhereInput[]
  NOT?: Prisma.VacancyWhereInput | Prisma.VacancyWhereInput[]
  id?: Prisma.StringFilter<"Vacancy"> | string
  title?: Prisma.StringFilter<"Vacancy"> | string
  description?: Prisma.StringFilter<"Vacancy"> | string
  location?: Prisma.StringFilter<"Vacancy"> | string
  company?: Prisma.StringFilter<"Vacancy"> | string
  createdAt?: Prisma.DateTimeFilter<"Vacancy"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Vacancy"> | Date | string
}

export type VacancyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  company?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VacancyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.VacancyWhereInput | Prisma.VacancyWhereInput[]
  OR?: Prisma.VacancyWhereInput[]
  NOT?: Prisma.VacancyWhereInput | Prisma.VacancyWhereInput[]
  title?: Prisma.StringFilter<"Vacancy"> | string
  description?: Prisma.StringFilter<"Vacancy"> | string
  location?: Prisma.StringFilter<"Vacancy"> | string
  company?: Prisma.StringFilter<"Vacancy"> | string
  createdAt?: Prisma.DateTimeFilter<"Vacancy"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Vacancy"> | Date | string
}, "id">

export type VacancyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  company?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.VacancyCountOrderByAggregateInput
  _max?: Prisma.VacancyMaxOrderByAggregateInput
  _min?: Prisma.VacancyMinOrderByAggregateInput
}

export type VacancyScalarWhereWithAggregatesInput = {
  AND?: Prisma.VacancyScalarWhereWithAggregatesInput | Prisma.VacancyScalarWhereWithAggregatesInput[]
  OR?: Prisma.VacancyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VacancyScalarWhereWithAggregatesInput | Prisma.VacancyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Vacancy"> | string
  title?: Prisma.StringWithAggregatesFilter<"Vacancy"> | string
  description?: Prisma.StringWithAggregatesFilter<"Vacancy"> | string
  location?: Prisma.StringWithAggregatesFilter<"Vacancy"> | string
  company?: Prisma.StringWithAggregatesFilter<"Vacancy"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Vacancy"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Vacancy"> | Date | string
}

export type VacancyCreateInput = {
  id?: string
  title: string
  description: string
  location: string
  company: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VacancyUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  location: string
  company: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VacancyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VacancyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VacancyCreateManyInput = {
  id?: string
  title: string
  description: string
  location: string
  company: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VacancyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VacancyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  company?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VacancyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  company?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VacancyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  company?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VacancyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  location?: Prisma.SortOrder
  company?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type VacancySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  location?: boolean
  company?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vacancy"]>

export type VacancySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  location?: boolean
  company?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vacancy"]>

export type VacancySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  location?: boolean
  company?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["vacancy"]>

export type VacancySelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  location?: boolean
  company?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type VacancyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "location" | "company" | "createdAt" | "updatedAt", ExtArgs["result"]["vacancy"]>

export type $VacancyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Vacancy"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    location: string
    company: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["vacancy"]>
  composites: {}
}

export type VacancyGetPayload<S extends boolean | null | undefined | VacancyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VacancyPayload, S>

export type VacancyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VacancyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VacancyCountAggregateInputType | true
  }

export interface VacancyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vacancy'], meta: { name: 'Vacancy' } }
  /**
   * Find zero or one Vacancy that matches the filter.
   * @param {VacancyFindUniqueArgs} args - Arguments to find a Vacancy
   * @example
   * // Get one Vacancy
   * const vacancy = await prisma.vacancy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VacancyFindUniqueArgs>(args: Prisma.SelectSubset<T, VacancyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Vacancy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VacancyFindUniqueOrThrowArgs} args - Arguments to find a Vacancy
   * @example
   * // Get one Vacancy
   * const vacancy = await prisma.vacancy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VacancyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VacancyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vacancy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyFindFirstArgs} args - Arguments to find a Vacancy
   * @example
   * // Get one Vacancy
   * const vacancy = await prisma.vacancy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VacancyFindFirstArgs>(args?: Prisma.SelectSubset<T, VacancyFindFirstArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vacancy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyFindFirstOrThrowArgs} args - Arguments to find a Vacancy
   * @example
   * // Get one Vacancy
   * const vacancy = await prisma.vacancy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VacancyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VacancyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Vacancies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Vacancies
   * const vacancies = await prisma.vacancy.findMany()
   * 
   * // Get first 10 Vacancies
   * const vacancies = await prisma.vacancy.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vacancyWithIdOnly = await prisma.vacancy.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VacancyFindManyArgs>(args?: Prisma.SelectSubset<T, VacancyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Vacancy.
   * @param {VacancyCreateArgs} args - Arguments to create a Vacancy.
   * @example
   * // Create one Vacancy
   * const Vacancy = await prisma.vacancy.create({
   *   data: {
   *     // ... data to create a Vacancy
   *   }
   * })
   * 
   */
  create<T extends VacancyCreateArgs>(args: Prisma.SelectSubset<T, VacancyCreateArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Vacancies.
   * @param {VacancyCreateManyArgs} args - Arguments to create many Vacancies.
   * @example
   * // Create many Vacancies
   * const vacancy = await prisma.vacancy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VacancyCreateManyArgs>(args?: Prisma.SelectSubset<T, VacancyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Vacancies and returns the data saved in the database.
   * @param {VacancyCreateManyAndReturnArgs} args - Arguments to create many Vacancies.
   * @example
   * // Create many Vacancies
   * const vacancy = await prisma.vacancy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Vacancies and only return the `id`
   * const vacancyWithIdOnly = await prisma.vacancy.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VacancyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VacancyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Vacancy.
   * @param {VacancyDeleteArgs} args - Arguments to delete one Vacancy.
   * @example
   * // Delete one Vacancy
   * const Vacancy = await prisma.vacancy.delete({
   *   where: {
   *     // ... filter to delete one Vacancy
   *   }
   * })
   * 
   */
  delete<T extends VacancyDeleteArgs>(args: Prisma.SelectSubset<T, VacancyDeleteArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Vacancy.
   * @param {VacancyUpdateArgs} args - Arguments to update one Vacancy.
   * @example
   * // Update one Vacancy
   * const vacancy = await prisma.vacancy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VacancyUpdateArgs>(args: Prisma.SelectSubset<T, VacancyUpdateArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Vacancies.
   * @param {VacancyDeleteManyArgs} args - Arguments to filter Vacancies to delete.
   * @example
   * // Delete a few Vacancies
   * const { count } = await prisma.vacancy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VacancyDeleteManyArgs>(args?: Prisma.SelectSubset<T, VacancyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vacancies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Vacancies
   * const vacancy = await prisma.vacancy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VacancyUpdateManyArgs>(args: Prisma.SelectSubset<T, VacancyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vacancies and returns the data updated in the database.
   * @param {VacancyUpdateManyAndReturnArgs} args - Arguments to update many Vacancies.
   * @example
   * // Update many Vacancies
   * const vacancy = await prisma.vacancy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Vacancies and only return the `id`
   * const vacancyWithIdOnly = await prisma.vacancy.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VacancyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VacancyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Vacancy.
   * @param {VacancyUpsertArgs} args - Arguments to update or create a Vacancy.
   * @example
   * // Update or create a Vacancy
   * const vacancy = await prisma.vacancy.upsert({
   *   create: {
   *     // ... data to create a Vacancy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Vacancy we want to update
   *   }
   * })
   */
  upsert<T extends VacancyUpsertArgs>(args: Prisma.SelectSubset<T, VacancyUpsertArgs<ExtArgs>>): Prisma.Prisma__VacancyClient<runtime.Types.Result.GetResult<Prisma.$VacancyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Vacancies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyCountArgs} args - Arguments to filter Vacancies to count.
   * @example
   * // Count the number of Vacancies
   * const count = await prisma.vacancy.count({
   *   where: {
   *     // ... the filter for the Vacancies we want to count
   *   }
   * })
  **/
  count<T extends VacancyCountArgs>(
    args?: Prisma.Subset<T, VacancyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VacancyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Vacancy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VacancyAggregateArgs>(args: Prisma.Subset<T, VacancyAggregateArgs>): Prisma.PrismaPromise<GetVacancyAggregateType<T>>

  /**
   * Group by Vacancy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VacancyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VacancyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VacancyGroupByArgs['orderBy'] }
      : { orderBy?: VacancyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VacancyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVacancyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Vacancy model
 */
readonly fields: VacancyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Vacancy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VacancyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Vacancy model
 */
export interface VacancyFieldRefs {
  readonly id: Prisma.FieldRef<"Vacancy", 'String'>
  readonly title: Prisma.FieldRef<"Vacancy", 'String'>
  readonly description: Prisma.FieldRef<"Vacancy", 'String'>
  readonly location: Prisma.FieldRef<"Vacancy", 'String'>
  readonly company: Prisma.FieldRef<"Vacancy", 'String'>
  readonly createdAt: Prisma.FieldRef<"Vacancy", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Vacancy", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Vacancy findUnique
 */
export type VacancyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter, which Vacancy to fetch.
   */
  where: Prisma.VacancyWhereUniqueInput
}

/**
 * Vacancy findUniqueOrThrow
 */
export type VacancyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter, which Vacancy to fetch.
   */
  where: Prisma.VacancyWhereUniqueInput
}

/**
 * Vacancy findFirst
 */
export type VacancyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter, which Vacancy to fetch.
   */
  where?: Prisma.VacancyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vacancies to fetch.
   */
  orderBy?: Prisma.VacancyOrderByWithRelationInput | Prisma.VacancyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vacancies.
   */
  cursor?: Prisma.VacancyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vacancies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vacancies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vacancies.
   */
  distinct?: Prisma.VacancyScalarFieldEnum | Prisma.VacancyScalarFieldEnum[]
}

/**
 * Vacancy findFirstOrThrow
 */
export type VacancyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter, which Vacancy to fetch.
   */
  where?: Prisma.VacancyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vacancies to fetch.
   */
  orderBy?: Prisma.VacancyOrderByWithRelationInput | Prisma.VacancyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Vacancies.
   */
  cursor?: Prisma.VacancyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vacancies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vacancies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Vacancies.
   */
  distinct?: Prisma.VacancyScalarFieldEnum | Prisma.VacancyScalarFieldEnum[]
}

/**
 * Vacancy findMany
 */
export type VacancyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter, which Vacancies to fetch.
   */
  where?: Prisma.VacancyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Vacancies to fetch.
   */
  orderBy?: Prisma.VacancyOrderByWithRelationInput | Prisma.VacancyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Vacancies.
   */
  cursor?: Prisma.VacancyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Vacancies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Vacancies.
   */
  skip?: number
  distinct?: Prisma.VacancyScalarFieldEnum | Prisma.VacancyScalarFieldEnum[]
}

/**
 * Vacancy create
 */
export type VacancyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * The data needed to create a Vacancy.
   */
  data: Prisma.XOR<Prisma.VacancyCreateInput, Prisma.VacancyUncheckedCreateInput>
}

/**
 * Vacancy createMany
 */
export type VacancyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Vacancies.
   */
  data: Prisma.VacancyCreateManyInput | Prisma.VacancyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Vacancy createManyAndReturn
 */
export type VacancyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * The data used to create many Vacancies.
   */
  data: Prisma.VacancyCreateManyInput | Prisma.VacancyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Vacancy update
 */
export type VacancyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * The data needed to update a Vacancy.
   */
  data: Prisma.XOR<Prisma.VacancyUpdateInput, Prisma.VacancyUncheckedUpdateInput>
  /**
   * Choose, which Vacancy to update.
   */
  where: Prisma.VacancyWhereUniqueInput
}

/**
 * Vacancy updateMany
 */
export type VacancyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Vacancies.
   */
  data: Prisma.XOR<Prisma.VacancyUpdateManyMutationInput, Prisma.VacancyUncheckedUpdateManyInput>
  /**
   * Filter which Vacancies to update
   */
  where?: Prisma.VacancyWhereInput
  /**
   * Limit how many Vacancies to update.
   */
  limit?: number
}

/**
 * Vacancy updateManyAndReturn
 */
export type VacancyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * The data used to update Vacancies.
   */
  data: Prisma.XOR<Prisma.VacancyUpdateManyMutationInput, Prisma.VacancyUncheckedUpdateManyInput>
  /**
   * Filter which Vacancies to update
   */
  where?: Prisma.VacancyWhereInput
  /**
   * Limit how many Vacancies to update.
   */
  limit?: number
}

/**
 * Vacancy upsert
 */
export type VacancyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * The filter to search for the Vacancy to update in case it exists.
   */
  where: Prisma.VacancyWhereUniqueInput
  /**
   * In case the Vacancy found by the `where` argument doesn't exist, create a new Vacancy with this data.
   */
  create: Prisma.XOR<Prisma.VacancyCreateInput, Prisma.VacancyUncheckedCreateInput>
  /**
   * In case the Vacancy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VacancyUpdateInput, Prisma.VacancyUncheckedUpdateInput>
}

/**
 * Vacancy delete
 */
export type VacancyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
  /**
   * Filter which Vacancy to delete.
   */
  where: Prisma.VacancyWhereUniqueInput
}

/**
 * Vacancy deleteMany
 */
export type VacancyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vacancies to delete
   */
  where?: Prisma.VacancyWhereInput
  /**
   * Limit how many Vacancies to delete.
   */
  limit?: number
}

/**
 * Vacancy without action
 */
export type VacancyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vacancy
   */
  select?: Prisma.VacancySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vacancy
   */
  omit?: Prisma.VacancyOmit<ExtArgs> | null
}
